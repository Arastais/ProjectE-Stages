buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.+', changing: true
    }
}
        
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
import org.apache.tools.ant.filters.ReplaceTokens
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

//apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/minecraft/maven.gradle'
apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/minecraft/artifacts.gradle'

//project name is set in settings.gradle to ${mod_name}
version = "${mod_ver}"
group = "${mod_group}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${mod_name}-${mc_ver}"
project.ext {
	author = "${mod_author}"
	modid = "${mod_id}"
	desc = "${mod_desc}"
	mcver = "${mc_ver}"
}

eclipse {
	classpath {
		downloadSources = true
		downloadJavadoc = true
	}
}

java {
	toolchain.languageVersion = JavaLanguageVersion.of(8)
	/**Automated tasks */
	//withSourcesJar()
	//withJavadocJar()
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
	//version = "${mc_ver}-${forge_ver}"
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: 'snapshot', version: "${mcp_ver}-${mc_major_ver}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    
    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
			
			/***The below if statements are to add args to your gradle.properties file in user home***/
            //	(DO NOT add them directly to the gradle.properties file for this project)
            //	Setting the below properties allows use of your normal Minecraft account in the
            //	dev environment including having your skin load. Each property also has a comment
            //	explaining what information to set the value to/format it expects
            //	One thing to note is because of the caching that goes on, after changing these
            //	variables, you need to refresh the project and rerun genIntellijRuns/genEclipseRuns
            if (project.hasProperty('mc_uuid')) {
                //Your uuid without any dashes in the middle
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                //Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                //Your access token, you can find it in your '.minecraft/launcher_profiles.json' file
                args '--accessToken', project.getProperty('mc_accessToken')
            }
            if (project.hasProperty('forge_force_ansi')) {
                //Force ansi if declared as a gradle variable, as the auto detection doesn't detect IntelliJ properly
                // or eclipse's plugin that adds support for ansi escape in console
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }
			
			mods {
                projecte_stages {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
			mods {
                projecte_stages {
                    source sourceSets.main
                }
            }
        }
		data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', "${mod_id}".toString(), '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                projecte_stages {
                    source sourceSets.main
                }
            }
        }
    }
}

processResources
{
    inputs.property "name", "${mod_full_name}"
    inputs.property "version", project.version
    inputs.property "mcversion", project.mcver
    inputs.property "modid", project.modid
    inputs.property "author", project.author
    inputs.property "description", project.desc

    //Replace parameters in mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version, 'mcversion':project.mcver, 'name':"${mod_full_name}", 'modid':project.modid, 'author':project.author, 'description':project.desc
    }
    //Copy everything else
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task processSources(type: Sync) {
    inputs.property "name", "${mod_full_name}"
    inputs.property "version",  project.version
    inputs.property "modid", project.modid
	from sourceSets.main.java
    filter(ReplaceTokens, tokens: [
		VERSION: mod_ver,
		NAME: mod_full_name,
		MODID: mod_id
	])
	into "$buildDir/processed"
}

repositories {
	maven {
		name "MinecraftForge"
		url "https://files.minecraftforge.net/maven/"
        content {
            includeGroupByRegex 'net\\.minecraftforge.*'
            includeGroup 'de.oceanlabs.mcp'
            includeGroup 'cpw.mods'
        }
	}
    maven {
		name 'CraftTweaker2'
        url 'https://maven.blamejared.com'
		content {
            includeGroup 'CraftTweaker2'
        }
    }
	maven {
		name 'GameStages'
        url 'https://maven.mcmoddev.com'
		content {
            includeGroup 'net.darkhax.bookshelf'
            includeGroup 'net.darkhax.gamestages'
        }
    }
	maven { //ProjectE
		name 'Curse Maven'
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    flatDir { //local file alternative
    	name 'ProjectE'
    	dirs 'deps'
    }
} 

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_ver}-${forge_ver}"

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
	
	compileOnly fg.deobf("net.darkhax.bookshelf:Bookshelf-${mc_ver}:${bookshelf_ver}")
	implementation fg.deobf("net.darkhax.gamestages:GameStages-${mc_ver}:${gamestages_ver}")
	
	runtimeOnly fg.deobf("CraftTweaker2:CraftTweaker2-MC1120-Main:${mc_major_ver}-${ct_ver}")
	implementation fg.deobf("CraftTweaker2:CraftTweaker2-API:${ct_ver}")
	implementation fg.deobf("CraftTweaker2:ZenScript:${ct_ver}")
	
	implementation fg.deobf("curse.maven:projecte-226410:2702991")//sinkillerj's projecte doesn't build on 1.12.2 and isn't published in a maven repo, so curse maven is used instead for now
	//implementation fg.deobf("deps:Projecte:${mc_ver}:PE${projecte_ver}") //local file alternative (for if you want sources included)
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "${mod_id}",
            "Specification-Vendor": "${mod_author}",
            "Specification-Version": "${mod_ver}",
            "Implementation-Title": "${mod_name}",
            "Implementation-Version": "${mod_ver}",
            "Implementation-Vendor" :"${mod_author}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

compileJava {
	sourceCompatibility = targetCompatibility = "${java_ver}" // Need this here so eclipse task generates correctly.
	source = processSources.outputs
}


publishing {
    publications {
        mavenJava(MavenPublication) {
			//groupId project.group
            artifactId project.archivesBaseName
            //version project.version
            from components.java
            //artifact jar //fufilled by components.java
			/**Not needed because these tasks are automatically made
			artifact sourcesJar {
				classifier 'sources'
			}
			artifact javadocJar {
				classifier 'javadoc'
			}*/
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

artifacts {
    archives javadocJar
	archives sourcesJar
}