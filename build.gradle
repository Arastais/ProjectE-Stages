buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
		jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.+', changing: true
    }
}
plugins {
	id 'java'
	id 'eclipse'
	id 'maven-publish'
	id 'idea'
}
apply plugin: 'net.minecraftforge.gradle'

//apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/minecraft/maven.gradle'
//apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/minecraft/artifacts.gradle'

//project name is set in settings.gradle to ${mod_name}
version = "${mod_ver}"
group = "${mod_group}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${mod_name}-${mc_ver}"
project.ext {
	author = "${mod_author}"
	modid = "${mod_id}"
	desc = "${mod_desc}"
	credits = "${mod_credits}"
	mcver = "${mc_ver}"
	full_name = "${mod_full_name}"
	file = 'run'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'
            
			/***The below if statements are to add args to your gradle.properties file in user home***/
            //	(DO NOT add them directly to the gradle.properties file for this project)
            //	Setting the below properties allows use of your normal Minecraft account in the
            //	dev environment including having your skin load. Each property also has a comment
            //	explaining what information to set the value to/format it expects
            //	One thing to note is because of the caching that goes on, after changing these
            //	variables, you need to refresh the project and rerun genIntellijRuns/genEclipseRuns
            if (project.hasProperty('mc_uuid')) {
                //Your uuid without any dashes in the middle
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                //Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                //Your access token, you can find it in your '.minecraft/launcher_profiles.json' file
                args '--accessToken', project.getProperty('mc_accessToken')
            }
            if (project.hasProperty('forge_force_ansi')) {
                //Force ansi if declared as a gradle variable, as the auto detection doesn't detect IntelliJ properly
                // or eclipse's plugin that adds support for ansi escape in console
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }
            
            mods {
                projecte_stages {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                projecte_stages {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'projecte_stages', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                projecte_stages {
                    source sourceSets.main
                }
            }
        }
    }
}

processResources {
	inputs.property 'version', "${mod_ver}"
    inputs.property 'name', "${mod_full_name}"
   	inputs.property 'credits', "${mod_credits}"
    inputs.property 'author', "${mod_author}"
    inputs.property 'desc', "${mod_desc}"
	
	filesMatching('META-INF/mods.toml'){
		//expand(project.properties)
		expand('version': "${mod_ver}", 'name': "${mod_full_name}", 'credits': "${mod_credits}", 'author': "${mod_author}", 'desc': "${mod_desc}")
	}

    //from(sourceSets.main.resources.srcDirs) {
        //include 'META-INF/mods.toml'
        //expand 'version': "${mod_ver}", 'id': "${mod_id}", 'name': "${mod_full_name}",
            //'credits': "${mod_credits}", 'author': "${mod_author}", 'desc': "${mod_desc}"
    //}
    //from(sourceSets.main.resources.srcDirs) {
        //exclude 'META-INF/mods.toml'
    //}
}

repositories {
	maven {
		name "MinecraftForge"
		url "https://files.minecraftforge.net/maven/"
        content {
            includeGroupByRegex 'net\\.minecraftforge.*'
            includeGroup 'de.oceanlabs.mcp'
            includeGroup 'cpw.mods'
        }
	}
	maven { //ProjectE
		name 'Curse Maven'
        url "https://www.cursemaven.com"
        content {
            includeGroup 'curse.maven'
        }
    }
    maven { //CraftTweaker & GameStages
		name 'Jared'
        url 'https://maven.blamejared.com'
		content {
            includeGroup 'com.blamejared.crafttweaker'
            includeGroup 'net.darkhax.bookshelf'
            includeGroup 'net.darkhax.gamestages'
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_ver}-${forge_ver}"

	compileOnly fg.deobf("net.darkhax.bookshelf:Bookshelf-${mc_ver}:${bookshelf_ver}")
	implementation fg.deobf("net.darkhax.gamestages:GameStages-${mc_ver}:${gamestages_ver}")
	
	implementation fg.deobf("com.blamejared.crafttweaker:CraftTweaker-${mc_ver}:${ct_ver}")
	
	//ProjectE is not published on any known maven, so cursemaven is used instead
	compileOnly "curse.maven:projecte-226410:3223223" //projecte api
	runtimeOnly fg.deobf("curse.maven:projecte-226410:3223221") //projecte full
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "${mod_id}",
            "Specification-Vendor": "${mod_author}",
            "Specification-Version": "${mod_ver}",
            "Implementation-Title": "${mod_name}",
            "Implementation-Version": "${mod_ver}",
            "Implementation-Vendor" :"${mod_author}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
			groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}